rem Memory Viewer (memview.bas)
rem My first proper program in MikeOS
rem I wrote this in Text Editor on MikeOS 4.1.1
rem If you fix a bug or add a feature it would be good if you could send it to
rem me at icantrememberthis11@hotmail
CLS
PRINT "Joshua's Memory Viewer"
p = PROGSTART
print "Prog: "
move 6 1
print p
r = RAMSTART
move 0 2
print "RAM: "
move 5 2
print r
rem I removed this because it was annoying
rem Sound 2000 3
rem Sound 1000 2
cls
rem Box drawing characters (right to left top, to bottom)
rem I always forget these values
rem If someone could tell me how to do this in colour that would be great
Prep: 
a = 218 
b = 191
c = 195
d = 180
e = 192
f = 217
g = 179
h = 196
s = 0
$a = "n"
cursor off

Border:
  print chr a
  for x = 1 to 78
    move x 0
    print chr h
  next x
  move 79 0
  print chr b
  move 0 1
  print chr g
  move 79 1
  print chr g
  move 0 2
  print chr c
  move 79 2
  print chr d
  for x = 1 to 78
    move x 2
    print chr h
  next x
  rem top overlay
  move 6 3
  print "0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9"
  move 53 3
  print "01234567890123456789"
  rem now for the bottom
  move 6 20
  print "0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9"
  move 53 20
  print "01234567890123456789"
  l = 0
  for x = 3 to 21
    move 0 x
    print chr g
    move 79 x
    print chr g
    m = x + 1
    move 70 m
    l = l + 20
    q = l - 20
    rem how many digits will we need?
    if l < 110 then move 75 m
    if l > 110 then move 74 m
    if q = 0 then move 76 m
    if l < 330 then print q
    rem now the other side
    if l < 110 then move 3 m
    if l > 110 then move 2 m
    if q = 0 then move   4 m
    if l < 330 then print q
  next x
  move 0 22
  print chr e
  move 79 22
  print chr f
  for x = 1 to 78
    move x 22
    print chr h
  next x
  move 2 1
  print "Memory Viewer"
  move 2 21
  print "Up and Down to scroll, G for goto, E to enter value"
  if $a = "y" then return

Main:
  if n = 0 then gosub getbytes
  n = 1
  waitkey k
    rem look at all these gosub in my main keyboard loop
    rem what a good structured programer I am!
    if k = 27 then goto endprog
    if k = 1 then gosub goup 
    if k = 2 then gosub godown
    if k = 'g' then gosub jumpto
    if k = 'G' then gosub jumpto
    if k = 'e' then gosub newval
    if k = 'E' then gosub newval
    goto Main

endprog:
  cls
  print "Thanks for using my Memory Viewer."
  print "Don't forget to fix any bugs you might find!"
  print "Bye, bye!"
  cursor on
  end
getbytes:
rem copy the memory we need
  rem Make sure that we don't go into the program's memory
  rem That could get ugly
  if s < p then return
  rem Make sure we have enough RAM to view it
  if s > 31999 then return
  for x = 0 to 319
    k = x + s
    peek i k
    j = x + r + 100
    poke i j
  next x
printbytes:
rem now lets put it onto the screen
  for y = 4 to 19
    for x = 53 to 72
      move x y
      w = y - 4
      v = x - 53
      w = w * 20
      j = w + v
      j = j + r + 100
      peek i j
      rem so it doesn't beep, we print a null
      rem this doesn't affect the hex value
      if i = 7 then i = 0
      print chr i
    next x
  next y
  rem Print location top of screen
  move 50 1
  print "                 "
  if s > 10000 then move 58 1 
  if s < 10000 then move 59 1
  if s < 1000 then move 60 1
  if s < 100 then move 61 1
  if s < 10 then move 62 1
  print s   
printhex:
rem same as printbytes but in hex format
  for y = 4 to 19 
    for x = 5 to 24
      w = y - 4
      v = x - 5
      w = w * 20
      j = w + v
      j = j + r + 100
      peek i j
      v = v * 2
      v = v + 6
      move v y
      print hex i
    next x
  next y
return

goup:
  rem Decrease starting point and redraw
  rem if s < 1 then s = s - 20
  if s > 0 then s = s - 20
  goto getbytes
godown:
  rem Increase starting point and redraw
  if s < 30000 then s = s + 20
  goto getbytes
box:
  rem lets have fun and draw a box for features!
  cls
  rem is this needed?
  move 0 0
  print chr a
  move 39 0 print chr b
  rem first line
  for x = 1 to 38
    move x 0
    print chr h
  next x
  rem continue edges
  move 0 1
  print chr g
  move 39 1
  print chr g
  move 0 2
  print chr c
  move 39 2
  print chr d
  rem now the sides
  for x = 3 to 8
    move 0 x
    print chr g
    move 39 x
    print chr g
  next x
  move 0 9
  print chr e
  move 39 9
  print chr f
  rem second line
  for x = 1 to 38
    move x 2
    print chr h
  next x
  rem third and final line
  for x = 1 to 38
    move x 9
    print chr h
  next x
  rem ok, glad that's done. Isn't box drawing fun! :-(
  rem now we can add features without having to do this again
  return
jumpto:
  rem draw box
  gosub box
  rem let put in a title
  move 2 1
  print "Goto - Location"
  rem now lets add text
  move 2 4
  print "Enter the number of a memory cell to"
  move 2 5
  print "go to that location. It must be"
  move 2 6
  print "between 0 and 65235."
  move 2 8
  print "Press enter to go"
  move 2 7
  print ">"
  move 3 7
  input s
  rem this doesn't work but it doesn't matter
  if s < 65535 then goto jumpto
  rem Redraw main interface.
  cls
  $a = "y"
  gosub Border
  gosub getbytes
  $a = "n"
  return
newval:
  gosub box
  move 2 1
  print "Change Cell"
  move 2 3
  print "First enter the cell number to change"
  move 2 4
  print "at the position it appears on the"
  move 2 5
  print "screen ie 256 NOT the absolute value."
  move 2 6
  print ">"
  move 3 6
  x = 0
  input x
  if x > 300 then goto nvf
  move 2 7
  print "Input a new value between 0 and 255."
  move 2 8
  print ">"
  move 3 8
  y = 0
  input y
  if y > 255 then goto newval
  x = x + s
  poke y x
nvf:
  cls
  $a = "y"
  gosub Border
  gosub getbytes
  $a = "n"
  return
