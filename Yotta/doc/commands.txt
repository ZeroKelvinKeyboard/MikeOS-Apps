Command: insert_bytes
Command Number: 0
Inputs:         P1 = starting location
                P2 = size of data to move
                P3 = number of bytes to move data forward
Outputs:        None 
Description: Moves a block of data after the starting location forward by a
number of bytes. Usually used to make space for text inserts.
The internal variable for the end of the text block is increased.

Command: remove_bytes
Command Number: 1
Inputs:         P1 = starting location
                P2 = current size of data
                P3 = number of bytes to remove
Outputs:        None
Description: Removes a number of bytes from the beginning of a data block and
shifts the remaining data backward to fill the new space. Usually used to
remove deleted text.  
The internal variable for the end of the text block is decreased by the number
of bytes deleted.

Command: search
Command Number: 2
Inputs:		P1 = area start pointer
		P2 = area length
		P3 = search string pointer
Outputs:	P1 = match indicator (0 = no match, 1 = match found)
		P2 = pointer to start of matching text
		P3 = number of newline character between start and match
Description:
This command searches the given area for a series of text characters. Matching
text is not case sensitive and does not have to be a whole term. The match can
start anywhere between and including the first and last character in the given
area, and can be a location that would put some but not all of the match
outside the given area. 

If P1 = 0, there are no matches found in the area and the other return
parameters are invalid and should be discarded. Otherwise, if P1 = 1, there are
one or more matches found and the other parameters reflect information about
the first match.

The number of newline characters found between the start of the area and the 
matching text is given so that the line number in the editor can be updated 
correctly.


Command: redraw
Command Number: 3
Inputs:         None
Outputs:        None
Description: Clears the screen and redraws the titlebar with the title and
version at the top of the screen and the keyboard shortcuts at the bottom. Note
that this command only draws "static" information, it will not draw the
filename, file status or messages.

Command: set_filename
Command Number: 4
Inputs:         P1 = filename pointer
Outputs:        None 
Description: Sets the filename displayed in the centre of the titlebar to the
name given by a pointer. The filename pointer can be set to zero if the file
being edited has not been assigned a filename and this function will use a
replacement string that indicates an unnamed file.
Must be a zero terminated string, the filename will remain until the screen is
redrawn and the screen must be redrawn before setting a new filename.

Command: set_caption
Command Number: 5
Inputs:         P1 = caption string pointer 
Outputs:        None 
Description: Sets a caption string displayed centred on the line between the
keyboard shortcuts at the bottom and the last line of text (the caption bar). 
The string given must be a zero terminated string and contain equal or less 
than 76 characters of text. The caption will remain until the screen is redrawn
or a new caption is set. Square brackets will be automatically added around the
caption.

Command: input_caption
Command Number: 6
Inputs:         P1 = prompt string pointer
                P2 = input buffer pointer
Outputs:        (input buffer changed)
Description: Displays the prompt string given at the left of the caption bar
and allows the user to enter input, which is put into the input buffer as a
null terminated string. The input prompt cannot be cancelled but may be a blank
string (only a null terminator).

Command: set_basic_parameters
Command Number: 7
Inputs:		P1 = pointer to parameter string
Outputs:	(none)
Description: Sets the parameters to be used to be passed to an executing BASIC
program. The length of these parameters can be no longer than 127 characters.

Command: render_text
Command Number: 8
Inputs:         P1 = Offset of first text character
                P2 = First line to draw on
		P3 = Number of lines to draw
Outputs:        None
Description: Draws text from the given location to the text area with lines
ending in UNIX-style newline characters until either the text reaches a line
outside the text area or the text finishes the the end of the file. Text lines
spanning beyond the right most position will be cut off and not wrapped.

Command: set_modified
Command Number: 9
Inputs:         P1 = Modifier indicator status (0 = non visible, 1 = visible)
Outputs:        None
Description: Sets or removes an indicator in the titlebar that shows the file
being edited has been modified since it was last saved.

Command: clear_text_area
Command Number: 10
Inputs:         None
Outputs:        None
Description: Clears all text characters from the text area without changing any
other part of the interface.

Command: shift_right_text
Command Number: 11
Inputs:         P1 = starting text column
                P2 = text row
Outputs:        None
Description: Copies all text in the given row, starting from the given column,
one position to the right. The original character in the given column with be
present at both old and new positions and the right-most character will be
overwritten if it exists.

Command: shift_left_text
Command Number: 12
Inputs:         P1 = starting text column
                P2 = text row
Outputs:        None
Description: Copies all text in the given row, between the given column and
the right most position on the line, to the left on position. The character at
the given column will be overwriten by the character right of it and the
rightmost character will be removed from the old position rather than be 
duplicated.

Command: ask_caption
Command Number: 13
Inputs:         P1 = prompt string pointer
Outputs:        P2 = response (0 = Yes, 1 = No, 2 = Cancel)
Description: Presents the prompt string at the left of the caption bar and
prompts the users to respond as yes, no or cancel by pressing the first letter
of each option. The response is store in a register to be used later.

Command: get_help
Command Number: 14
Inputs:		P1 = File Data Start
		P2 = Free Memory Start
Outputs:	None
Description: Displays the help screen with information on keyboard shortcuts
and memory statistics based on known and given information.

Command: read_key
Command Number: 17
Inputs:		None
Outputs:	P1 = keycode (see 'doc/keys.txt')
Description: This command waits for a key to be pressed and translates the
keycode recieved into a value usable by the control section of the editor. This
function is used by the control section to bypass the BASIC interpreter's
default keycode translation in order to allow for a key code set more useful to
the editor. See 'doc/keys.txt' for information on key code translation.

Command: scroll_up 
Command Number: 18
Inputs:		P1 = Offset of first line on screen
		P2 = Lines to scroll
Outputs:	P1 = Offset of first newly drawn line.
		P2 = Number of lines actually scrolled.

Description: Scrolls the screen upwards by a number of lines. Lines that are
still needed are simply moved upward and new lines needed are added to the
screen. If the end of the text area is encounted as given by an internal
variable, any further scrolling will be cancelled. The number of lines that
were scrolled replaces the number of lines requested to scroll.


Command: scroll_down 
Command Number: 19
Inputs:		P1 = Offset of first line on screen
		P2 = Offset of end of file
Outputs:	None 
Description: Same as above but scrolls down rather than up.

Command: set_text_limits
Command Number: 20
Inputs:		P1 = Text Start
		P2 = Text End
Outputs:	None
Description: Sets the internal variables for the start and end of the text
area to the given start and end values.

